package presentation;

import appointment.system.AppointmentDTO;
import appointment.system.ExistentAppointmentDTO;
import appointment.system.IAppointmentManager;
import doctor.system.DoctorDTO;
import doctor.system.IDoctorDAO;
import factory.Factory;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import patient.system.IPatientDAO;
import patient.system.PatientDTO;
import user.system.ExistentUserDTO;

public class JFrameRegisterAppointment extends javax.swing.JFrame {

    private Date appointementDate;
    private DoctorDTO selectedDoctor;
    private ExistentUserDTO existentUserDTO;
    private List<DoctorDTO> doctores;
    private List<ExistentAppointmentDTO> appointments;
    private int selectedIndex = -1;
    private String typeUser = "PATIENT";

    //Frame of Patient, normal
    public JFrameRegisterAppointment(ExistentUserDTO existentUserDTO) {
        initComponents();
        cmbPatient.setVisible(false);
        lblPatient.setVisible(false);
        lblCurp.setVisible(false);
        txtCurp.setVisible(false);

        //   dateChooser = new JDateChooser();
        //  getContentPane().add(dateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 220, 130, 30));
        // Rectangle lblDateBounds = lblDate.getBounds();
        // dateChooser.setBounds(lblDate.getBounds());
        //  this.add(dateChooser);
        this.existentUserDTO = existentUserDTO;

    }

    //Constructor for Doctor
    public JFrameRegisterAppointment(ExistentUserDTO existentUserDTO, String typeUser) {
        initComponents();
        cmbPatient.setVisible(true);
        lblPatient.setVisible(true);
        txtCurp.setEditable(false);
        this.typeUser = typeUser;
        this.existentUserDTO = existentUserDTO;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FondoPanel = new javax.swing.JPanel();
        FondoAzul = new javax.swing.JPanel();
        Hospital_General = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        cmbDoctor = new javax.swing.JComboBox<>();
        lblPatient = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        lblTime = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtNote = new javax.swing.JTextField();
        cbxSpecialization = new javax.swing.JComboBox<>();
        lblSpecilaization = new javax.swing.JLabel();
        lblDoctors1 = new javax.swing.JLabel();
        cmbPatient = new javax.swing.JComboBox<>();
        cmbTime = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        txtCurp = new javax.swing.JTextField();
        lblCurp = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblDate1 = new javax.swing.JLabel();
        dateChooser = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FondoPanel.setBackground(new java.awt.Color(255, 255, 255));
        FondoPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        FondoAzul.setBackground(new java.awt.Color(0, 153, 255));
        FondoAzul.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        Hospital_General.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Hospital_General.setText("General Hospital");

        javax.swing.GroupLayout FondoAzulLayout = new javax.swing.GroupLayout(FondoAzul);
        FondoAzul.setLayout(FondoAzulLayout);
        FondoAzulLayout.setHorizontalGroup(
            FondoAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Hospital_General, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        FondoAzulLayout.setVerticalGroup(
            FondoAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Hospital_General, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Register Appointment");

        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        cmbDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        cmbDoctor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbDoctorMouseClicked(evt);
            }
        });
        cmbDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDoctorActionPerformed(evt);
            }
        });

        lblPatient.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblPatient.setText("Patients");

        lblTime.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblTime.setText("Time");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel13.setText("Note...");

        txtNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNoteActionPerformed(evt);
            }
        });

        cbxSpecialization.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FAMILY",   "PEDIATRIC",
            "SURGERY",
            "PSYCHIATRY",
            "ANESTHIOLOGY",
            "CARDIOLOGY"}));
cbxSpecialization.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        cbxSpecializationActionPerformed(evt);
    }
    });

    lblSpecilaization.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
    lblSpecilaization.setText("Specialization");

    lblDoctors1.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
    lblDoctors1.setText("Doctors");

    cmbPatient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
    cmbPatient.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            cmbPatientMouseClicked(evt);
        }
    });
    cmbPatient.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmbPatientActionPerformed(evt);
        }
    });

    cmbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"}));
    cmbTime.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmbTimeActionPerformed(evt);
        }
    });

    jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
    jLabel14.setText("Date ");

    lblCurp.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
    lblCurp.setText("CURP");

    javax.swing.GroupLayout FondoPanelLayout = new javax.swing.GroupLayout(FondoPanel);
    FondoPanel.setLayout(FondoPanelLayout);
    FondoPanelLayout.setHorizontalGroup(
        FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(FondoPanelLayout.createSequentialGroup()
            .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(2, 2, 2)
            .addComponent(FondoAzul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGroup(FondoPanelLayout.createSequentialGroup()
            .addGap(50, 50, 50)
            .addComponent(jLabel1))
        .addGroup(FondoPanelLayout.createSequentialGroup()
            .addGap(260, 260, 260)
            .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(FondoPanelLayout.createSequentialGroup()
                    .addComponent(lblSpecilaization)
                    .addGap(18, 18, 18)
                    .addComponent(lblDoctors1))
                .addGroup(FondoPanelLayout.createSequentialGroup()
                    .addComponent(cbxSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(cmbDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(47, 47, 47)
            .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(cmbPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblPatient)))
        .addGroup(FondoPanelLayout.createSequentialGroup()
            .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(FondoPanelLayout.createSequentialGroup()
                    .addGap(271, 271, 271)
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(lblDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(FondoPanelLayout.createSequentialGroup()
                    .addGap(280, 280, 280)
                    .addComponent(jLabel14)))
            .addGap(37, 37, 37)
            .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblTime)
                .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(FondoPanelLayout.createSequentialGroup()
                    .addComponent(txtCurp, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(lblCurp, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FondoPanelLayout.createSequentialGroup()
            .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(FondoPanelLayout.createSequentialGroup()
                    .addGap(271, 271, 271)
                    .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel13)
                        .addComponent(txtNote, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(FondoPanelLayout.createSequentialGroup()
                    .addGap(130, 130, 130)
                    .addComponent(btnCancel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNext)))
            .addGap(108, 108, 108))
    );
    FondoPanelLayout.setVerticalGroup(
        FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(FondoPanelLayout.createSequentialGroup()
            .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(FondoPanelLayout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addComponent(FondoAzul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(17, 17, 17)
            .addComponent(jLabel1)
            .addGap(87, 87, 87)
            .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblSpecilaization)
                .addComponent(lblPatient)
                .addComponent(lblDoctors1))
            .addGap(8, 8, 8)
            .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cbxSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cmbDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cmbPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(28, 28, 28)
            .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel14)
                .addComponent(lblTime)
                .addComponent(lblCurp))
            .addGap(6, 6, 6)
            .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(FondoPanelLayout.createSequentialGroup()
                    .addGap(7, 7, 7)
                    .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtCurp, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
            .addComponent(jLabel13)
            .addGap(18, 18, 18)
            .addComponent(txtNote, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(54, 54, 54)
            .addGroup(FondoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnNext)
                .addComponent(btnCancel))
            .addGap(32, 32, 32))
    );

    getContentPane().add(FondoPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 0, 870, 620));

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed

        AppointmentDTO newAppointmentDTO = new AppointmentDTO();
        String note = txtNote.getText();
        String curp = txtCurp.getText();
        appointementDate = dateChooser.getDate();

        if (appointementDate == null || selectedDoctor == null || cmbDoctor.getModel().getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Fill all fields", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {

                // Date from comboBox
                String selectedTime = (String) cmbTime.getSelectedItem();
                // Parse date
                SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
                Date time = timeFormat.parse(selectedTime);
                // Combine dates
                appointementDate.setHours(time.getHours());
                appointementDate.setMinutes(time.getMinutes());

                newAppointmentDTO.setAppointmentDate(appointementDate);
                newAppointmentDTO.setNote(note);
                newAppointmentDTO.setDoctor(selectedDoctor);
                newAppointmentDTO.setStatus("ACTIVE");

                if (curp.isBlank()) {
                    newAppointmentDTO.setPatient(existentUserDTO.getPatientDTO());
                    IAppointmentManager appointmentManager = Factory.getAppointmentManager();
                    appointmentManager.createAppointment(newAppointmentDTO);
                    JFrameInitialPatient frameInitialPatient = new JFrameInitialPatient(existentUserDTO);
                    frameInitialPatient.setVisible(true);
                    this.dispose();
                } else {

                    if (txtCurp.getText().isBlank() || curp.isEmpty()) {

                        JOptionPane.showMessageDialog(this, "Fill all fields", "Error", JOptionPane.ERROR_MESSAGE);
                        System.out.println("SEGUNDO");
                    } else {

                        try {

                            IPatientDAO patientDAO = Factory.getPatientDAO();
                            PatientDTO patientDTO = patientDAO.EntityToDto(patientDAO.searchPatientByCurp(txtCurp.getText()));
                            newAppointmentDTO.setPatient(patientDTO);
                            newAppointmentDTO.setDoctor(existentUserDTO.getDoctorDTO());
                            IAppointmentManager appointmentManager = Factory.getAppointmentManager();
                            appointmentManager.createAppointment(newAppointmentDTO);
                            JFrameInitialDoctors frameInitialMedicos = new JFrameInitialDoctors(existentUserDTO);
                            frameInitialMedicos.setVisible(true);
                            this.dispose();

                        } catch (Exception ex) {
                            Logger.getLogger(JFrameRegisterAppointment.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }

            } catch (Exception ex) {
                Logger.getLogger(JFrameRegisterAppointment.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnNextActionPerformed

    /**
     *
     * @param evt
     */
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:

        if (typeUser != null) {

            JFrameInitialDoctors medic = new JFrameInitialDoctors(this.existentUserDTO);
            medic.setVisible(true);
            this.dispose();

        } else {

            JFrameInitialPatient pat = new JFrameInitialPatient(this.existentUserDTO);
            pat.setVisible(true);
            this.dispose();

        }

    }//GEN-LAST:event_btnCancelActionPerformed

    private void cmbDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDoctorActionPerformed
        selectedIndex = cmbDoctor.getSelectedIndex();

        // Verificar si se seleccionó un doctor válido
        if (selectedIndex != -1) {
            // Obtener el objeto DoctorDTO seleccionado
            selectedDoctor = doctores.get(selectedIndex);

        }
    }//GEN-LAST:event_cmbDoctorActionPerformed

    /**
     * Search the doctors based on the specilization selected from the combo box
     *
     * @param evt
     */
    private void cbxSpecializationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSpecializationActionPerformed

        IDoctorDAO doctorDAO = Factory.getDoctorDAO();
        String selectedSpecialization = (String) cbxSpecialization.getSelectedItem();
        doctores = doctorDAO.searchBySpecialization(selectedSpecialization);
        cmbDoctor.removeAllItems();
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        cmbDoctor.setModel(model);
        for (DoctorDTO doctor : doctores) {
            model.addElement(doctor);
        }
        this.cmbDoctor.setVisible(true);

    }//GEN-LAST:event_cbxSpecializationActionPerformed

    /**
     *
     * @param hour
     * @return
     */
    public int indexComboBox(int hour) {

        return switch (hour) {
            case 10 ->
                0;
            case 11 ->
                1;
            case 12 ->
                2;
            case 13 ->
                3;
            case 14 ->
                4;
            case 15 ->
                5;
            case 16 ->
                6;
            case 17 ->
                7;
            case 18 ->
                8;
            case 19 ->
                9;
            case 20 ->
                10;
            case 21 ->
                11;
            case 22 ->
                12;
            case 23 ->
                13;
            default ->
                -1;
        };

    }


    private void cmbDoctorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbDoctorMouseClicked
        // TODO add your handling code 

    }//GEN-LAST:event_cmbDoctorMouseClicked

    private void txtNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNoteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNoteActionPerformed

    private void cmbPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPatientActionPerformed
//        // TODO add your handling code here:
//        System.out.println("HOLA");
//        IAppointmentManager appointmentManager = Factory.getAppointmentManager();
//        appointments = appointmentManager.getAppointmentsByMedicalCart(existentUserDTO.getDoctorDTO().getMedicalCart());
//
//        DefaultComboBoxModel model = new DefaultComboBoxModel();
//
//        for (ExistentAppointmentDTO appointment : appointments) {
//            model.addElement(appointment.getPatient().getNames());
//
//        }
//
//        cmbPatient.setModel(model);
//        cmbPatient.setVisible(true);

    }//GEN-LAST:event_cmbPatientActionPerformed

    /**
     *
     * @param evt
     */
    private void cmbPatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbPatientMouseClicked
        // TODO add your handling code here:
        IAppointmentManager appointmentManager = Factory.getAppointmentManager();
        appointments = appointmentManager.getAppointmentsByMedicalCart(existentUserDTO.getDoctorDTO().getMedicalCart());

        if (appointments != null && !appointments.isEmpty()) {
            DefaultComboBoxModel model = new DefaultComboBoxModel<>();

            for (ExistentAppointmentDTO appointment : appointments) {
                // Obtener el objeto paciente de la cita
                PatientDTO patient = appointment.getPatient();
                if (patient != null) {
                    // Agregar el objeto paciente al modelo del combo box
                    model.addElement(patient);
                    txtCurp.setText(patient.getCurp());
                }
            }

            cmbPatient.setModel(model);
            cmbPatient.setVisible(true);

        }
    }//GEN-LAST:event_cmbPatientMouseClicked

    private void cmbTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTimeActionPerformed

//    /**
    //     * @param args the command line arguments
    //     */
    //    public static void main(String args[]) {
    //        /* Set the Nimbus look and feel */
    //        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    //        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
    //         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
    //         */
    //        try {
    //            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
    //                if ("Nimbus".equals(info.getName())) {
    //                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
    //                    break;
    //                }
    //            }
    //        } catch (ClassNotFoundException ex) {
    //            java.util.logging.Logger.getLogger(JFrameConfirmAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        } catch (InstantiationException ex) {
    //            java.util.logging.Logger.getLogger(JFrameConfirmAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        } catch (IllegalAccessException ex) {
    //            java.util.logging.Logger.getLogger(JFrameConfirmAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
    //            java.util.logging.Logger.getLogger(JFrameConfirmAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        }
    //        //</editor-fold>
    //        //</editor-fold>
    //
    //        /* Create and display the form */
    //        java.awt.EventQueue.invokeLater(new Runnable() {
    //            public void run() {
    //                new JFrameConfirmAppointment().setVisible(true);
    //            }
    //        });
    //    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel FondoAzul;
    private javax.swing.JPanel FondoPanel;
    private javax.swing.JLabel Hospital_General;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNext;
    private javax.swing.JComboBox<String> cbxSpecialization;
    private javax.swing.JComboBox<String> cmbDoctor;
    private javax.swing.JComboBox<String> cmbPatient;
    private javax.swing.JComboBox<String> cmbTime;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JLabel lblCurp;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDate1;
    private javax.swing.JLabel lblDoctors1;
    private javax.swing.JLabel lblPatient;
    private javax.swing.JLabel lblSpecilaization;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTextField txtCurp;
    private javax.swing.JTextField txtNote;
    // End of variables declaration//GEN-END:variables
}
